// Generated by CoffeeScript 1.6.3
(function() {
  var BE_HOSTNAME, BE_PORT, HOST, PORT, acceptsMatcher, app, express, getContent, http, httpProxy, proxy, removeScript, respond, running, server, spawn, _ref, _ref1;

  http = require('http');

  spawn = require('child_process').spawn;

  express = require('express');

  httpProxy = require('http-proxy');

  running = false;

  _ref = process.argv.splice(2), PORT = _ref[0], HOST = _ref[1];

  _ref1 = HOST.split(':'), BE_HOSTNAME = _ref1[0], BE_PORT = _ref1[1];

  process.on('uncaughtException', function(err) {
    return console.error('Uncaught exception in server', err.toString());
  });

  removeScript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;

  getContent = function(url, callback) {
    var content, phantom;
    content = '';
    phantom = spawn('phantomjs', ['--load-images=true', __dirname + '/phantom-server.js', url]);
    phantom.stdout.setEncoding('utf8');
    phantom.stdout.on('data', function(data) {
      return content += data.toString();
    });
    phantom.stderr.on('data', function(data) {
      return console.log("stderr: " + data);
    });
    return phantom.on('exit', function(code) {
      if (code === 0) {
        return callback(null, content.replace(removeScript, ''));
      } else {
        return callback(new Error("phantom exited with status code " + code));
      }
    });
  };

  proxy = new httpProxy.RoutingProxy();

  acceptsMatcher = /^text\/html/i;

  respond = function(req, res, next) {
    if (acceptsMatcher.test(req.headers.accept)) {
      res.header('Access-Control-Allow-Origin', '*');
      res.header('Access-Control-Allow-Headers', 'X-Requested-With');
      return getContent("" + req.protocol + "://" + HOST + req.url, function(err, content) {
        if (err != null) {
          return next(err);
        }
        return res.send(content);
      });
    } else {
      return proxy.proxyRequest(req, res, {
        https: req.secure,
        host: BE_HOSTNAME,
        port: BE_PORT || (req.secure && 443 || 80)
      });
    }
  };

  app = express();

  app.enable('trust proxy');

  app.use(express.logger());

  app.use(respond);

  server = http.createServer(app);

  server.on('listening', function() {
    console.log("SeoServer listening on port " + PORT + ", proxying to " + HOST);
    return running = true;
  });

  server.on('close', function() {
    return console.log('SeoServer server closed');
  });

  process.on('SIGTERM', function() {
    console.log('SIGTERM received');
    if (running) {
      return server.close();
    }
  });

  server.listen(PORT, function(err) {
    if (err != null) {
      throw err;
    }
  });

}).call(this);
